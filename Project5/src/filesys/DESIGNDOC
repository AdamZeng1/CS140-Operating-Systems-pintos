       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

Giorgi Guliashvili<gguli13@freeuni.edu.ge>
Luka Matcharadze <lmach14@freeuni.edu.ge>
Givi Beridze <gberi14@freeuni.edu.ge>
Tornike Zhizhiashvili<tzhiz14@freeuni.edu.ge>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
VM ით მუშაობს

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
Read Write lock java API

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define SECTOR_NUM (8 * 1024 * 1024 / BLOCK_SECTOR_SIZE) 8 მეგაბაიტიან დისკზე მაქსიმუმ ამდენი სექტორი გვექნება

დისკზეც ზუსტად იგივე სტრუქტურას ინახავს ყველა ფაილი რასაც იუზერის სრედი ვირტუალურ მემორიზე(ფეიჯდირი), ოღონდ ფეიჯდირს 2 ჩადგმული მეპი აქვს, ჩვენ სამი(ყველა მეპი ერთ სექტორში ეტევა)
struct inode_disk
{
    block_sector_t lvl1;               /* First level sector.  */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[125];               /* Not used. */
} PACKED;

#define INODE_DISK_LVL_N BLOCK_SECTOR_SIZE / sizeof(uint16_t) რადგან მაქსიმუმ 8 მეგაბაიტიან დისკებზე გვაქვს შეხება 16 ბიტიანი ფოინთერები საკმარისი იქნება. თითო დისკის ბლოკი(მეპი) შეინახავს ამდენ ცალს მისამართს

struct inode_disk_lvl{
    uint16_t map[INODE_DISK_LVL_N]; // სამივე დონეს ერთნაირი სტრუქტურა აქვს, მიუთითებს შემდეგი დონის(ან ფაილის) სექტორს
}PACKED;

/* In-memory inode. */
struct inode
{
    struct rw_lock rwlock;		/* რიდ ვრაით ლოქი */
    struct list_elem elem;
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
};

static struct list open_inodes; // ღია აინოუდების ლისტი(აქამდეც იყო)
static struct lock l_lock; //მხოლოდ ლისტში ჩაგდებისას ერთმანეთს ელოდებიან აინოდები

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

INODE_DISK_LVL_N = BLOCK_SECTOR_SIZE / sizeof(uint16_t) = 512 / 16 = 32
INODE_DISK_LVL_N ^ 3 = 32768

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

ყველა აინოუდს აქვს თავისი რიდ ვრაით ლოქი, თუ არ აექსთენდებს სრედი მაშინ მხოლოდ რიდ ლოქი აქვს აღებული, თუ აექსთენდებს ვრაით ლოქი აქვს ან/და რიდ ლოქს ააფგრეიდებს ვრაით ლოქზე.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

A საც და B საც აღებული აქვთ რიდ ლოქი, B შეეცდება თავისი რიდ ლოქის ვრაით ლოქში გადაცვლას მაგრამ მოუწევს დაელოდოს სანამ ყველა რიდ ლოქი დარილიზდება. A წაიკითხავს არაფერს და დაარილიზებს თავის ლოქს, B აიღებს ვრაით ლოქს დააექსთენდებს და გაუშვებს.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
თუ ექსთენდი არ ხდება, წაკითხვა და ჩაწერა ხდება კონკურენტულად. ჩამწერი ატომურ ოპერაციებად წერს ინთებს(თუ ქეშშია). თუ ექსთენდი ხდება, ჩამწერი(ექსთენდი მხოლოდ ჩაწერისას ხდება) თავისი რიდ ლოქის დააფგრეიდებისას ბლოკავს ყველა სხვა რიდ ლოქის მთხოვნელს და ელოდება ყველა რიდ ლოქიანს სანამ რილიზს გააკეთებენ. შემდეგ აექსთენდებს, (რიდერები და ვრაითერები ელოდებიან). მომლოდინეები იმ თანმიმდევრობით გამოიღვიძებენ როგორც დაიწყეს ლოდინი.
!!!
რიდ ლოქს წაკითხვისას და ვრაითს ჩაწერისას არ ვიყენებ, ჩაწერაც და წაკითხვაც ექსთენდის გარეშე ხდება რიდ ლოქით.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
3 მაგად ჩადგმული მეპები მაქვს. თითოეული მეპი ეტევა ერთ სექტორში. კარგი იმითაა რომ ვზოგავ დამატებით სტრუქტურას რასაც გამოვყობ. შემეძლო მეპები დამეგრძელებინა(1 სექტორზე მეტი მოეცვათ), ეს კარგი იქნებოდა იმიტომ, რომ ეს სექტორები ერთმანეთის მეზობლად იქნებოდა და რიდ ეჰედს აზრი ექნებოდა(ახლა რაკი ყველა სექტორი გაფანტულია რიდ ეჰედი ვერაფერს ვერ შვება).თუმცა მეტ სექტორებს დავხაჯავთ პატარა ფაილებისთვის.


			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define REDUCEE 1
struct rw_lock dir_locks_list[SECTOR_NUM / REDUCEE]; ლოქები ფოლდერებისთვის

/* A directory. */
struct dir 
  {
    struct inode *inode;                /* Backing store. */
    off_t pos;                          /* Current position. */
  };
უცვლელია

/* A single directory entry. */
struct dir_entry 
  {
    block_sector_t inode_sector;        /* Sector number of header. */
    char name[NAME_MAX + 1];            /* Null terminated file name. */
    bool in_use;                        /* In use or free? */
    bool is_dir;	// მხოლოდ მშობელმა ფოლდერმა იცის ფაილზე მიუთითებს თუ ფოლდერზე
  };

ასევე ყველა ფოლდერს პირველ 4 ბაიტში უწერია მშობელი ფოლდერის მისამართი(გარდა რუთისა)

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

მაქვს საწყისი ფოლდერის ცნება, თუკი აბოსილუტი გზაა მოცემული, მაშინ საწყისი ფოლდერი რუთია, თუ არადა იუზერის აქტიური დირექტორია.
ბოლო სახელს გამოვყობ მოცემული გზიდან რაღაცა/რაღაცე//რაღაცაც///სახელი//.
დარჩენილი რაღაცა/რაღაცე//რაღაცაც// ვცვლი საწყის ფოლდერს.
ანუ ამ შეცვლის შემდეგ საწყისი ფოლდერი იქნება რაღაცაც ფოლდერი. ამის შემდეგ არის ორი ვარიანტი ან [სახელი არის . ან ..] ან ნამდვილი სახელი. თუ ნამდვილი სახელია ვხსნი მას, თუარადა ვიქცევი შესაბამისად.(ვხსნი იგივე ფოლდერს ან მის წინას) 

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

ფოლდერში ჩამატება, წაშლისას ვიღებ ვრაით ლოქს, ანუ ერთდროულად ორი ან თითო თითო ჩამატება წაშლა ვერ მოხდება 1 ფოლდერში. უკვე არსებული ფაილის სახელით მეორეს შექმნაზე ფოლდერი არ ჩაიმათებს და დააბრუნებს ერორს.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

გახსნილი ფოლდერის წაშლა არ შეიძლება. ფოლდერის წაშლისას ვამოწმებ რომ მისი მთავარი აინოდი არავის არ აქვს გახსნილი.

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

ბევრი ქეისი არ აქვს. თუ აბსოლუტური გზაა მითითებული ვხსნი რუთს თუ არადა რიოფენს ვუკეთებ აქტიურ ფოლდერს. შემდეგ ზუსტად ერთიდაიგივეს ვაკეთებ ორივე შემთხვევაში. strbrk თი მარტივდ გამოვყობ ფოლდერის სახელებს და ჩავდივარ(ავდივარ) სასურველ ფოლდერამდე.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct cache_entry{
    char data[BLOCK_SECTOR_SIZE]; //სექტორის დეითა
    struct lock lock; // როცა თვითნ ენთრის მფლობელის არ შეცვლის გარანტირება გვინდა აღებული უნდა გვქონდეს ეს ლოქი
    int holder; // მფლობელი სექტორი
    uint16_t dirty; //რამდენჯერ ჩაიწერა რამე
    uint16_t accessed; //რამდენჯერ ჩაიწერა ან წაიკითხა ვინმემ
};

ფაქტობრივა ეს არის ბლოკ კლასის(კლასი რომ გვქონდეს) ფუნქციების ოვერლოუდი ისე რომ ქეშიც გამოვიყენოთ.
struct cached_block{
    struct block *block; // ბლოკის მისამართი რომელსაც ვუმატებთ ქეშირების დონეს
    int buffer_len; // რამდენ ცალიანი ქეშის დონე გვაქვს
    struct cache_entry *entries; // ქეშზე მიმთითებელი
    int8_t *addr; //თუკი სექტორს აქვს თავისი ქეშ რამში მისი მიმთითებელი
    struct rw_lock *locks; // ყოველ სექტორს აქვს თავისი რიდ ვრაით ლოქი
#ifdef READ_AHEAD
    uint64_t queue_e; // ბოლოს რა რიდ ეჰედის მოთხოვნა შემოვიდა
    uint64_t queue_s; // ბოლოს რა რიდ ეჰედი ვქენით
    uint16_t queue[QUEUE_N]; // წრიული ქიუ, queue_s queue_e სულ იზრდება,
    //ჩვენ განვიხილათ მათ ნაშტს QUEUE_N ზე, თუ კი ქიუ გადაივსება ახალი მოთხოვნები გადაეწერება ძველ მოთხოვნებს(თუ ამდენი მოთხოვნა ჩქარა შემოვიდა ჯობია ახლებს მივაქციოთ ყურადღება.
#endif
    int evict_I;
};

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.
    პოულობს ისეთ ქეშ ენთრის რომელიც ექსესდი არ არის(შემოწმების შემდეგ ანულებს).
    გადაუყვება ქეშ ენთრიებს(თუ ბევრი პროცესია მაინც ერთი ცვლადით გადაუყვებიან) და ატომურად ზრდიან ამ ცვლადს.(რა აზრი აქვს რომ ორმა სრედმა ერთი ენთრი შეამოწმოს(თუ აღებადი იყო პირველი უკვე აიღებდა თუ არადა არც მეორემ უნდა აიღოს მაშინვე(მერე რა რომ გაანულა)))
    ცდის რომ აიღოს ენთრის ლოქი, თუ ვერ აიღო ანუ სხვა რაღაცას უშვება და ეშვება. თუ აიღო ნიშნავს რომ დაიფიქსია ეს ენთრი და შეუძლია გააგრძელოს ოპერაციები.
    თუ მფლობელი არ ყავს გამიყენებს ამ ენთრის, თუ ყავს
       ცდის რომ აიღოს ვრაით ლოქი (ცდა ნიშნავს რომ არავინ უნდა კითხულობდეს ან წერდეს ახლა ქეშში), თუ წერს რატომ უნდა წავათვათ მაშინ იმათ მოუწევთ დისკიდან წაკითხვა.
       თუ აიღო ვრაით ლოქი, დაფლაშავს აქამდე რაც ეწერა ენთრიში და თვითონ გამიყენებს, ყოფილ მფლობელს კი გაუსუფთავებს შესაბამის მიმთითებელს ქეშზე.
>> C3: Describe your implementation of write-behind.
    ერთი სრედი cached_block_init ისას იქმნება რომელიც გარკვეულ ინტერვალებში ფლაშავს შეცვლილ ქეშებს.

>> C4: Describe your implementation of read-ahead.
    write-behind ის სრედი ასევე უყურებს ქიუს(და კითხულობს) სადაც cached_block_read* ამატებს მისი წაკითხული სექტორის შემდეგ სექტორს წასაკითხად.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?
მას აქვს რიდ ლოქი აღებული. სხვებს კი ევიქთისთვის ვრაით ლოქი ჭირდებათ.

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?
ბლოკის ლოქსაც ვიღებთ.

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.
თუ კი ზოგიერთი ფაილი ან ფაილის სეგმენტი სტატისტიკურად ბევრად ხშირად იკითხება ვიდრე სხვა დანარჩენი, მათი რამში შენახვა მომგებიანი იქნება.
თუ კი ხშირად სტატისტიკურად პოპულარულ ფაილებს მათი ნაკლებად ხშირად ჩაწერა დისკზე მომგებიანი იქნება.
თუ კი წრფივად ვკითხულობთ ფაილებს და არ დავხტივართ და ასევე ფაილის სექტორები ახლო ახლოსაა და ასევე დიდი დატვირთვა არაა დისკზე და წაკითხული სექტორის ანალიზს დიდი დრო უნდა, read_ahead მოასწრებს წინასწარ წაიკითხოს შემდეგი სექტორი და იუზერი აღარ ალოდინოს.


