       	       	     +-------------------------+
		     |		CS 140	       |
		     | PROJECT 4: FILE SYSTEMS |
		     |	   DESIGN DOCUMENT     |
		     +-------------------------+

---- GROUP ----

Giorgi Guliashvili<gguli13@freeuni.edu.ge>
Luka Matcharadze <lmach14@freeuni.edu.ge>
Givi Beridze <gberi14@freeuni.edu.ge>
Tornike Zhizhiashvili<tzhiz14@freeuni.edu.ge>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.
VM ით მუშაობს

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.
Read Write lock java API

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

#define SECTOR_NUM (8 * 1024 * 1024 / BLOCK_SECTOR_SIZE) 8 მეგაბაიტიან დისკზე მაქსიმუმ ამდენი სექტრი გვექნება

დისკზეც ზუსტად იგივე სტრუქტურას ინახავს ყველა ფაილი რასაც იუზერის სრედი ვირტუალურ მემორიზე(ფეიჯდირი), ოღონდ ფეიჯდირს 2 ჩადგმული მეპი აქვს, ჩვენ სამი(ყველა მეპი ერთ სექტორში ეტევა)
struct inode_disk
{
    block_sector_t lvl1;               /* First level sector.  */
    off_t length;                       /* File size in bytes. */
    unsigned magic;                     /* Magic number. */
    uint32_t unused[125];               /* Not used. */
} PACKED;

#define INODE_DISK_LVL_N BLOCK_SECTOR_SIZE / sizeof(uint16_t) რადგან მაქსიმუმ 8 მეგაბაიტიან დისკებზე გვაქვს შეხება 16 ბიტიანი ფოინთერები საკმარისი იქნება. თითო დისკის ბლოკი(მეპი) შეინახავს ამდენ ცალს მისამართს

struct inode_disk_lvl{
    uint16_t map[INODE_DISK_LVL_N]; // სამივე დონეს ერთნაირი სტრუქტურა აქვს
}PACKED;

/* In-memory inode. */
struct inode
{
    struct rw_lock rwlock;		/* რიდ ვრაით ლოქი */
    struct list_elem elem;
    block_sector_t sector;              /* Sector number of disk location. */
    int open_cnt;                       /* Number of openers. */
    bool removed;                       /* True if deleted, false otherwise. */
    int deny_write_cnt;                 /* 0: writes ok, >0: deny writes. */
};

static struct list open_inodes; // ღია აინოუდების ლისტი(აქამდეც იყო)
static struct lock l_lock; //მხოლოდ ლისტში ჩაგდებისას ერთმანეთს ელოდებიან აინოდები

>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

INODE_DISK_LVL_N = BLOCK_SECTOR_SIZE / sizeof(uint16_t) = 512 / 16 = 32
INODE_DISK_LVL_N ^ 3 = 32768

---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

ყველა აინოუდს აქვს თავისი რიდ ვრაით ლოქი, თუ არ აექსთენდებს სრედი მაშინ მხოლოდ რიდ ლოქი აქვს აღებული, თუ აექსთენდებს რიდ ლოქი აქვს ან/და რიდ ლოქს ააფგრეიდებს ვრაით ლოქზე.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

A საც და B საც აღებული აქვთ რიდ ლოქი, B შეეცდება თავისი რიდ ლოქის ვრაით ლოქში გადაცვლას მაგრამ მოუწევს დაელოდოს სანამ ყველა რიდ ლოქი დარილიზდება. A წაიკითხავს არაფერს და დაარილიზებს თავის ლოქს, B აიღებს ვრაით ლოქს დააექსთენდებს და გაუშვებს.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.
თუ ექსთენდი არ ხდება, წაკითხვა და ჩაწერა ხდება კონკურეტულად. ჩამწერი ატომურ ოპერაციებად წერს ინთებს. თუ ექსთენდი ხდება, ჩამწერი(ექსთენდი მხოლოდ ჩაწერისას ხდება) თავისი რიდ ლოქის დააფგრეიდებისას ბლოკავს ყველა სხვა რიდ ბლოქის მთხოვნელს და ელოდება ყველა რიდ ლოქიანს სანამ რილიზს გააკეთებენ. შემდეგ აექსთენდებს, (რიდერები და ვრაითერები ელოდებიან). მომლოდინეები იმ თანმიმდევრობით გამოიღვიძებენ როგორც დაიწყეს ლოდინი.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?
3 მაგად ჩადგმული მეპები მაქვს. თითოეული მეპი ეტევა ერთ სექტორში. კარგი იმითაა რომ ვზოგავ დამატებით სტრუქტურას რასაც გამოვყობ. შემეძლო მეპები დამეგრძელებინა(1 სექტორზე მეტი მოეცვათ), ეს კარგი იქნებოდა იმიტომ, რომ ეს სექტორები ერთმანეთის მეზობლად იქნებოდა და რიდ ეჰედს აზრი ექნებოდა(ახლა რაკი ყველა სექტორი გაფანტულია რიდ ეჰედი ვერაფერს ვერ შვება).თუმცა მეტ სექტორებს დავხაჯავთ პატარა ფაილებისთვის.


			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.


